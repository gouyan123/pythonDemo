python中函数 = 函数名 abs + 函数体 abs()；abs就是一个变量，可以执行一个值，也可以指向一个函数体；
函数式编程主要内容：
1、高阶函数；
2、三个内置的高阶函数；
3、函数名作为返回值；
4、匿名函数，lambda表达式；
5、装饰器；
---
1、高阶函数：
①函数名 "的名字" 也是一个变量，变量可以指向函数体；例如，abs(-10)，其中 abs 是一个函数名，是一个变量，abs() 表示调用变量abs指向的函数体；举例如下 f = abs 表示 f也指向abs变量指向的函数体；
例如，abs = 10，变量abs现在指向 10这个值了，不指向原来求绝对值的函数体了，遇到这种情况，只能重启编译器；
*****************************重点：函数名 "abs"只是一个变量，指向一个函数体，当被赋予普通变量时，不再指向原来的函数体；例如，变量a可以指向一个值，也可以指向一个函数体*******************************
②函数名 可以作为 另一个函数的参数：函数的参数一般是 变量 ，变量可以指向 函数体，举例如下：
def add(x,y,abs):
    return abs(x) + abs(y)
变量x指向一个值，变量y指向一个值，变量abs指向一个函数体；

2、三个内置的高阶函数：
map函数：映射；reduce函数：折叠；filter函数：过滤；这是python内置的几个高阶函数，直接将函数应用在其他数据上，尤其是序列上；举例如下：
def f(x):
    return x * x;
r = map(f,[1,2,3,4])    # map()函数将 集合中的元素 经过f()函数映射后，形成另一个集合；
print(list(r))
输出结果：[1, 4, 9, 16]
--
r = reduce(add,[1,2,3,4])   reduce()函数将 集合中的多个元素，按某种函数 折叠为一个元素；
print(r)
输出结果：10
--
filter()函数将 集合中不符合条件的元素剔除出去，组成一个新的集合；
--
3、函数名 作为返回值 被另一个函数返回，一个函数返回另一个函数的函数名 一般称为闭包函数，举例如下：
def lazy_sum(*args):
    def sum():  ## 当调用lazy_sum(*args)函数时，sum()函数并不会执行，因为lazy_sum(*args)里面只是定义了sum()函数，并没有调用sum()函数
        a = 0
        for n in args:
            a = a + n
        return a
    return sum  ## sum是一个变量，指向sum()函数体

f = lazy_sum(1,2,3,4,5) ## f是一个变量，指向sum()函数体；
print(f())
输出结果：15

4、有的函数，程序只是一次性调用，可以不定义 函数名，节省内存中变量空间，让代码更简洁，即 lambda表达式：重点重点重点：函数名就是一个变量，指向函数体，不指向值而已；
lambda表达式就是匿名函数；
l = list(map(lambda x : x * x,[1,2,3]))
输出结果：[1, 4, 9]

5、装饰器：函数A 返回 函数B 的函数名 的另一个作用，给函数A添加功能，此即为装饰器，装饰器需要满足两个条件：①不能修改被修饰函数A 的源代码；②不能修改被装饰函数A 的调用方式；
举例如下：给下面这段代码增加功能，计算这段代码执行时间，条件，不能修改这段代码，并且不能改变这个代码的调用方式；
def test():
    time.sleep(2)
    print('test is running')
test()
******************************************************************************************************************************************************************************
解决方法如下，定义如下 函数，并给上面代码加 @timer注解，test()函数加@timer注解，表示调用test()函数时，调用的是 timer(func)函数，传入的func函数名是 test；
******************************************************************************************************************************************************************************
def timer(func):
    def deco():
        start = time.time()
        func()
        stop = time.time()
        print(stop - start)
    return deco
完整代码如下：
import time
def timer(func):
    def deco():
        start = time.time()
        func()
        stop = time.time()
        print(stop - start)
    return deco

@timer
def test():
    time.sleep(2)
    print('test is running')
test()
输出结果：
test is running
2.0
